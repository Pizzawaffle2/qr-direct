generator client {
 provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
 url      = env("DATABASE_URL")
}

model Account {
 id                String  @id @default(cuid())
 userId            String
 type              String
 provider          String
 providerAccountId String
 refresh_token     String? @db.Text
 access_token      String? @db.Text
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String? @db.Text
 session_state     String?
 user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
}

model Session {
 id           String   @id @default(cuid())
 sessionToken String   @unique
 userId       String
 expires      DateTime
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
 id                 String               @id @default(cuid())
 name               String?
 email              String?              @unique
 emailVerified      DateTime?
 password           String?
 image              String?
 bio                String?              @db.Text
 accounts           Account[]
 sessions           Session[]
 qrCodes            QRCode[]
 settings           Settings?
 categories         Category[]
 tags               Tag[]
 templates          Template[]
 notificationSettings NotificationSetting[]
 apiKeys            APIKey[]
 passwordResetToken PasswordResetToken?
}

model VerificationToken {
 identifier String
 token      String   @unique
 expires    DateTime

 @@unique([identifier, token])
}

model PasswordResetToken {
 id        String   @id @default(cuid())
 token     String   @unique
 expires   DateTime
 user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 userId    String   @unique
 createdAt DateTime @default(now())
}

model NotificationSetting {
 id        String   @id @default(cuid())
 userId    String
 settingId String
 enabled   Boolean  @default(true)
 user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 @@unique([userId, settingId])
 @@index([userId])
}

model APIKey {
 id        String    @id @default(cuid())
 name      String
 key       String    @unique
 userId    String
 user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
 lastUsed  DateTime?
 createdAt DateTime  @default(now())
 updatedAt DateTime  @updatedAt
 
 @@index([userId])
 @@index([key])
}

model QRCode {
 id               String   @id @default(cuid())
 title            String
 type             String
 content          Json
 backgroundColor  String   @default("#FFFFFF")
 foregroundColor  String   @default("#000000")
 created          DateTime @default(now())
 userId           String
 user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
 id                    String  @id @default(cuid())
 userId                String  @unique
 theme                 String  @default("system")
 defaultBackgroundColor String  @default("#FFFFFF")
 defaultForegroundColor String  @default("#000000")
 errorCorrectionLevel  String  @default("M")
 autoDownload          Boolean @default(false)
 historyLimit         Int     @default(50)
 user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
 id          String     @id @default(cuid())
 name        String
 description String?
 color       String?
 order       Int        @default(0)
 templates   Template[]
 userId      String
 user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
 createdAt   DateTime   @default(now())
 updatedAt   DateTime   @updatedAt

 @@unique([name, userId])
 @@index([userId])
}

model Tag {
 id        String     @id @default(cuid())
 name      String
 userId    String
 user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
 templates Template[]
 createdAt DateTime   @default(now())
 updatedAt DateTime   @updatedAt

 @@unique([name, userId])
 @@index([userId])
}

model Template {
 id          String    @id @default(cuid())
 name        String
 description String?
 style       Json
 preview     String?
 categoryId  String?
 category    Category? @relation(fields: [categoryId], references: [id])
 tags        Tag[]
 isPublic    Boolean   @default(false)
 userId      String
 user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
 createdAt   DateTime  @default(now())
 updatedAt   DateTime  @updatedAt

 @@index([categoryId])
 @@index([userId])
}